generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  organizations Organization[]
  Comment       Comment[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int 
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

// Organization model
model Organization {
  id              Int      @id @default(autoincrement())
  name            String
  location        String
  dateEstablished DateTime
  logo            String?
  salaryRanges    String[]
  owner           User     @relation(fields: [ownerId], references: [id])
  ownerId         Int
  jobs            Job[]
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
}

// Job model
model Job {
  id                Int          @id @default(autoincrement())
  title             String
  recruitingCompany String
  salaryRange       String
  salary            Float
  jobType           JobType
  jobRole           JobRole
  description       String
  shortDescription  String
  comments          Comment[]
  location          String
  organization      Organization @relation(fields: [organizationId], references: [id])
  organizationId    Int
  expires_at        Int?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
}

enum Role {
  USER
  ADMIN
  // Add more roles as needed
}

// JobType enumeration
enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  // Add more job types as needed
}

// JobRole enumeration
enum JobRole {
  PROGRAMMING
  DESIGN
  MANAGEMENT
  FINANCE
  CUSTOMER_SUPPORT
  // Add more job roles as needed
}

// Comment model
model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     Int
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
}
