generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Organization model
// model Organization {
//   id              Int      @id @default(autoincrement())
//   name            String
//   location        String
//   dateEstablished DateTime
//   logo            String?
//   salaryRanges    String[]
//   owner           User     @relation(fields: [ownerId], references: [id])
//   ownerId         Int
//   jobs            Job[]
//   createdAt         DateTime @default(now()) @map(name: "created_at")
//   updatedAt         DateTime @default(now()) @map(name: "updated_at")
// }

// // Job model
// model Job {
//   id                Int          @id @default(autoincrement())
//   title             String
//   recruitingCompany String
//   salaryRange       String
//   salary            Float
//   jobType           JobType
//   jobRole           JobRole
//   description       String
//   shortDescription  String
//   comments          Comment[]
//   location          String
//   organization      Organization @relation(fields: [organizationId], references: [id])
//   organizationId    Int
//   expires_at        Int?
//   createdAt         DateTime @default(now()) @map(name: "created_at")
//   updatedAt         DateTime @default(now()) @map(name: "updated_at")
// }

// enum Role {
//   USER
//   ADMIN
//   // Add more roles as needed
// }

// // JobType enumeration
// enum JobType {
//   FULL_TIME
//   PART_TIME
//   INTERNSHIP
//   // Add more job types as needed
// }

// // JobRole enumeration
// enum JobRole {
//   PROGRAMMING
//   DESIGN
//   MANAGEMENT
//   FINANCE
//   CUSTOMER_SUPPORT
//   // Add more job roles as needed
// }

// // Comment model
// model Comment {
//   id        Int      @id @default(autoincrement())
//   text      String
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
//   job       Job      @relation(fields: [jobId], references: [id])
//   jobId     Int
//   createdAt         DateTime @default(now()) @map(name: "created_at")
//   updatedAt         DateTime @default(now()) @map(name: "updated_at")
// }
